<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Psr\Log\InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * CategorieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategorieRepository extends \Doctrine\ORM\EntityRepository
{

    public function findAllUserCatTrie($page, $nbMaxParPage, $id)
    {

        if(!is_numeric($page))
        {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1)
        {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }


        if(!is_numeric($nbMaxParPage))
        {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ')'
            );
        }

        $query = $this->_em->createQuery('SELECT c FROM TwigBundle:Categorie c JOIN c.user u WHERE u.id = :id AND
        c.idParent IS NULL');
        $query->setParameter('id', $id);


        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if(($paginator->count() <= $premierResultat) && $page !=1)
        {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la
            // première page
        }

        return $paginator;


    }

    /**
     * @param $groupement
     * @param $level
     * @param $id
     * @return array
     */
    public function findGroupementCat($groupement, $level, $id)
    {
        $query = $this->_em->createQuery('SELECT c FROM TwigBundle:Categorie c JOIN c.user u WHERE u.id = :id 
        AND c.groupement = :groupement AND c.niveau >= :level');
        $query->setParameter('groupement', $groupement);
        $query->setParameter('level', $level);
        $query->setParameter('id', $id);

        return $query->getResult();
    }





}
